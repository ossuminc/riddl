passes/input/check/everything/everything.riddl(16:3->15):
 Context 'full' should have a description:
   context full is {
passes/input/check/everything/everything.riddl(16:3->15):
 Context 'full' should have an author reference:
   context full is {
passes/input/check/everything/everything.riddl(16:3->15):
 Metadata in Context 'full' should not be empty:
   context full is {
passes/input/check/everything/everything.riddl(18:5->13):
 Type 'str' is unused:
     type str is String             // Define str as a String
passes/input/check/everything/everything.riddl(18:5->13):
 Type 'str' should start with a capital letter:
     type str is String             // Define str as a String
passes/input/check/everything/everything.riddl(19:5->13):
 Type 'num' should start with a capital letter:
     type num is Number             // Define num as a Number
passes/input/check/everything/everything.riddl(1:1->18):
 Domain 'Everything' should have a description:
 domain Everything is {
passes/input/check/everything/everything.riddl(1:1->18):
 Domain 'Everything' should have an author reference:
 domain Everything is {
passes/input/check/everything/everything.riddl(1:1->18):
 Metadata in Domain 'Everything' should not be empty:
 domain Everything is {
passes/input/check/everything/everything.riddl(20:5->13):
 Type 'boo' is unused:
     type boo is Boolean            // Define boo as a Boolean
passes/input/check/everything/everything.riddl(20:5->13):
 Type 'boo' should start with a capital letter:
     type boo is Boolean            // Define boo as a Boolean
passes/input/check/everything/everything.riddl(21:5->15):
 Type 'ident' should start with a capital letter:
     type ident is UUID             // Define ident as an Id
passes/input/check/everything/everything.riddl(22:5->13):
 Type 'dat' is unused:
     type dat is Date               // Define dat as a Date
passes/input/check/everything/everything.riddl(22:5->13):
 Type 'dat' should start with a capital letter:
     type dat is Date               // Define dat as a Date
passes/input/check/everything/everything.riddl(23:5->13):
 Type 'tim' is unused:
     type tim is Time               // Define tim as a Time
passes/input/check/everything/everything.riddl(23:5->13):
 Type 'tim' should start with a capital letter:
     type tim is Time               // Define tim as a Time
passes/input/check/everything/everything.riddl(24:5->15):
 Type 'stamp' should start with a capital letter:
     type stamp is TimeStamp        // Define stamp as a TimeStamp
passes/input/check/everything/everything.riddl(25:5->13):
 Type 'url' should start with a capital letter:
     type url is URL
passes/input/check/everything/everything.riddl(27:25->26):
 Field identifier 'a' is too short. The minimum length is 3:
     type PeachType is { a: Integer }
passes/input/check/everything/everything.riddl(27:5->19):
 Type 'PeachType' is unused:
     type PeachType is { a: Integer }
passes/input/check/everything/everything.riddl(28:5->14):
 Type 'enum' should start with a capital letter:
     type enum is any of { Apple Pear Peach(21) Persimmon(42) }
passes/input/check/everything/everything.riddl(30:5->13):
 Type 'alt' is unused:
     type alt is one of { enum or stamp or url }
passes/input/check/everything/everything.riddl(30:5->13):
 Type 'alt' should start with a capital letter:
     type alt is one of { enum or stamp or url }
passes/input/check/everything/everything.riddl(32:5->13):
 Type 'agg' should start with a capital letter:
     type agg is {
passes/input/check/everything/everything.riddl(34:7->9):
 Field identifier 'id' is too short. The minimum length is 3:
       id is ident,
passes/input/check/everything/everything.riddl(38:5->19):
 Type 'oneOrMore' is unused:
     type oneOrMore is many agg
passes/input/check/everything/everything.riddl(38:5->19):
 Type 'oneOrMore' should start with a capital letter:
     type oneOrMore is many agg
passes/input/check/everything/everything.riddl(39:5->20):
 Type 'zeroOrMore' is unused:
     type zeroOrMore is agg*
passes/input/check/everything/everything.riddl(39:5->20):
 Type 'zeroOrMore' should start with a capital letter:
     type zeroOrMore is agg*
passes/input/check/everything/everything.riddl(40:5->18):
 Type 'optional' is unused:
     type optional is agg?
passes/input/check/everything/everything.riddl(40:5->18):
 Type 'optional' should start with a capital letter:
     type optional is agg?
passes/input/check/everything/everything.riddl(42:5->21):
 Entity 'Something' is unused:
     entity Something is {
passes/input/check/everything/everything.riddl(42:5->21):
 Entity 'Something' should have a description:
     entity Something is {
passes/input/check/everything/everything.riddl(42:5->21):
 Entity 'Something' should have an author reference:
     entity Something is {
passes/input/check/everything/everything.riddl(42:5->21):
 Metadata in Entity 'Something' should not be empty:
     entity Something is {
passes/input/check/everything/everything.riddl(45:7->25):
 Type 'somethingDate' is unused:
       type somethingDate is Date
passes/input/check/everything/everything.riddl(45:7->25):
 Type 'somethingDate' should start with a capital letter:
       type somethingDate is Date
passes/input/check/everything/everything.riddl(49:7->22):
 Metadata in State 'someState' should not be empty:
       state someState of type Everything.StateType
passes/input/check/everything/everything.riddl(49:7->22):
 State 'someState' should have a description:
       state someState of type Everything.StateType
passes/input/check/everything/everything.riddl(49:7->22):
 State 'someState' should have an author reference:
       state someState of type Everything.StateType
passes/input/check/everything/everything.riddl(51:7->37):
 Function 'whenUnderTheInfluence' in Entity 'Something' should have content:
       function whenUnderTheInfluence is {
passes/input/check/everything/everything.riddl(51:7->37):
 Function 'whenUnderTheInfluence' is unused:
       function whenUnderTheInfluence is {
passes/input/check/everything/everything.riddl(51:7->37):
 Function 'whenUnderTheInfluence' should have a description:
       function whenUnderTheInfluence is {
passes/input/check/everything/everything.riddl(51:7->37):
 Function 'whenUnderTheInfluence' should have an author reference:
       function whenUnderTheInfluence is {
passes/input/check/everything/everything.riddl(51:7->37):
 Metadata in Function 'whenUnderTheInfluence' should not be empty:
       function whenUnderTheInfluence is {
passes/input/check/everything/everything.riddl(58:9->28):
 Processing for commands should result in sending an event:
         on command ACommand {
passes/input/check/everything/everything.riddl(65:5->26):
 Entity 'SomeOtherThing' is unused:
     entity SomeOtherThing is {
passes/input/check/everything/everything.riddl(65:5->26):
 Entity 'SomeOtherThing' should have a description:
     entity SomeOtherThing is {
passes/input/check/everything/everything.riddl(65:5->26):
 Entity 'SomeOtherThing' should have an author reference:
     entity SomeOtherThing is {
passes/input/check/everything/everything.riddl(65:5->26):
 Metadata in Entity 'SomeOtherThing' should not be empty:
     entity SomeOtherThing is {
passes/input/check/everything/everything.riddl(66:26->38):
 Inlet 'SOT_In' is not connected:
       sink trashBin is { inlet SOT_In is SomeOtherThing.ItHappened }
passes/input/check/everything/everything.riddl(66:7->20):
 Metadata in Sink 'trashBin' should not be empty:
       sink trashBin is { inlet SOT_In is SomeOtherThing.ItHappened }
passes/input/check/everything/everything.riddl(66:7->20):
 Sink 'trashBin' should have a description:
       sink trashBin is { inlet SOT_In is SomeOtherThing.ItHappened }
passes/input/check/everything/everything.riddl(66:7->20):
 Sink 'trashBin' should have an author reference:
       sink trashBin is { inlet SOT_In is SomeOtherThing.ItHappened }
passes/input/check/everything/everything.riddl(68:7->28):
 Metadata in State 'otherThingState' should not be empty:
       state otherThingState of type Everything.StateType
passes/input/check/everything/everything.riddl(68:7->28):
 State 'otherThingState' should have a description:
       state otherThingState of type Everything.StateType
passes/input/check/everything/everything.riddl(68:7->28):
 State 'otherThingState' should have an author reference:
       state otherThingState of type Everything.StateType
passes/input/check/everything/everything.riddl(6:3->17):
 Context 'APlant' should have an author reference:
   context APlant is {
passes/input/check/everything/everything.riddl(7:5->18):
 Source 'Source' should have an author reference:
     source Source is { outlet Commands is DoAThing } with { described by "Data Source" }
passes/input/check/everything/everything.riddl(8:20->34):
 Inlet 'Commands' overloads Outlet 'Commands' at passes/input/check/everything/everything.riddl(7:24->52):
     sink Sink is { inlet Commands is DoAThing } with { explained as "Data Sink" }
passes/input/check/everything/everything.riddl(8:5->14):
 Sink 'Sink' should have an author reference:
     sink Sink is { inlet Commands is DoAThing } with { explained as "Data Sink" }
