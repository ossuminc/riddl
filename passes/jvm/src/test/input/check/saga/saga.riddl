domain ignore1 is {
  context ignore2 is {
    type Something = command { ??? }
    type UndoSomething = command { ??? }
    function AnotherThing {
      requires { a: Integer described by "a"} returns { b: Integer described by "b"} body { ??? }
    } explained as "A simple function for another"
    function UndoAnotherThing {
      requires { c: Integer described by "c"} returns { d: Integer described by "d"} body { ??? }
    } explained as "A reversion function for undoing AnotherThing"

    entity blah is {
      inlet in is command Something
     }
    saga name is {
      requires: { p1: String, p2: String }
      returns: {s: String }
      option parallel
      step One is {
        send command Something to inlet blah.in
      } reverted by {
        send command UndoSomething to inlet blah.in
      } described as "First saga step"
      step Two is {
        call function AnotherThing
        "Pass 42 to AnotherThing function"
        "Return AnotherThing's output"
      } reverted by {
        call function UndoAnotherThing
      } described as "Second saga step"
    }
  } described as "ignore"
} described as "just for testing a saga"
