domain ignore1 is {
  context ignore2 is {
    type Something = command { ??? }
    type UndoSomething = command { ??? }
    function AnotherThing {
      requires { a: Integer with { described by "a" } } returns { b: Integer with { described by "b"} }
    } with { explained as "A simple function for another" }
    function UndoAnotherThing {
      requires { c: Integer with { described by "c" } } returns { d: Integer with { described by "d"} }
    } with { explained as "A reversion function for undoing AnotherThing" }

    entity blah is {
      sink trashCan is { inlet in is command Something }
     }
    saga name is {
      requires: { p1: String, p2: String }
      returns: {s: String }
      option parallel
      step One is {
        send command Something to inlet blah.trashCan.in
      } reverted by {
        send command UndoSomething to inlet blah.trashCan.in
      } with {
        described as "First saga step"
      }
      step Two is {
        call function AnotherThing
        "Pass 42 to AnotherThing function"
        "Return AnotherThing's output"
      } reverted by {
        call function UndoAnotherThing
      } with {
        described as "Second saga step"
      }
    } with {
      described as "ignore"
    }
  } with {
    described as "just for testing a saga"
  }
}
