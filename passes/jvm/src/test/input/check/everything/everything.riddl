domain Everything is {

  type SomeType is String
  type DoAThing is command { thingField: Integer }

  context APlant is {
    source Source is { outlet Commands is DoAThing } described by "Data Source"
    sink Sink is { inlet Commands is DoAThing } explained as "Data Sink"
    connector AChannel from outlet APlant.Source.Commands to inlet APlant.Sink.Commands explained as "A Channel"
  }

  type StateType is { someField1: SomeType }

  context full is {

    type str is String             // Define str as a String
    type num is Number             // Define num as a Number
    type boo is Boolean            // Define boo as a Boolean
    type ident is UUID             // Define ident as an Id
    type dat is Date               // Define dat as a Date
    type tim is Time               // Define tim as a Time
    type stamp is TimeStamp        // Define stamp as a TimeStamp
    type url is URL

    type PeachType is { a: Integer }
    type enum is any of { Apple Pear Peach(21) Persimmon(42) }

    type alt is one of { enum or stamp or url }

    type agg is {
      key is num,
      id is ident,
      time is TimeStamp
    }

    type oneOrMore is many agg
    type zeroOrMore is agg*
    type optional is agg?

    entity Something is {
      option aggregate option transient

      type somethingDate is Date

      command ACommand is { ??? }

      state someState of type Everything.StateType

      function whenUnderTheInfluence is {
        requires { n: Nothing }
        returns { b: Boolean }
        "some pseudo-code"
      }

      handler foo is {
        on command ACommand {
          send event full.SomeOtherThing.ItHappened to
            inlet SomeOtherThing.SOT_In
        }
      }
    }

    entity SomeOtherThing is {
      inlet SOT_In is SomeOtherThing.ItHappened
      type ItHappened is event { when: String }
      state otherThingState of type Everything.StateType
      handler fee is {
        on event ItHappened {
          set field SomeOtherThing.otherThingState.someField1 to "field ItHappened.when"
        }
      }
    }
  }
}
