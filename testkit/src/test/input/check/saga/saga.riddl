domain ignore1 is {
  context ignore2 is {
    type Something = command { ??? }
    type UndoSomething = command { ??? }
    function AnotherThing {
      requires { a: Integer described by "a"} returns { b: Integer described by "b"}
    } explained as "A simple function for another"
    function UndoAnotherThing {
      requires { c: Integer described by "c"} returns { d: Integer described by "d"}
    } explained as "A reversion function for undoing AnotherThing"

    entity blah is { ??? }
    saga name is {
      options(parallel)
      requires: { p1: String, p2: String }
      returns: {s: String }
      step One is {
        example A is {
          then tell command Something() to entity blah
        } described as "First step performing action"
        reverted by
        example One_Undo { then tell command UndoSomething() to entity blah }
        described as "First step compensation action"
      } described as "First saga step"
      step Two is {
        example B is {
          given "Step One has completed"
          then call AnotherThing(a=42)
          and "Pass 42 to AnotherThing function"
          and "Return AnotherThing's output"
          but "Revert it with UndoAnotherThing(a=42) if it fails"
        } described as "Second step performing action"
        reverted by
        scenario Two_Undo { then call UndoAnotherThing(a=42) }
        described as "Second step compensation action"
      } described as "Second saca step"
    }
  } described as "ignore"
} described as "just for testing a saga"
