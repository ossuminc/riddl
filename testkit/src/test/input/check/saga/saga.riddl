domain ignore1 is {
  context ignore2 is {
    type Something = command { ??? }
    type UndoSomething = command { ??? }
    function AnotherThing {
      requires { a: Integer described by "a"} returns { b: Integer described by "b"}
    } explained as "A simple function for another"
    function UndoAnotherThing {
      requires { c: Integer described by "c"} returns { d: Integer described by "d"}
    } explained as "A reversion function for undoing AnotherThing"

    entity blah is { ??? }
    saga name is {
      options(parallel)
      requires: { p1: String, p2: String }
      returns: {s: String }
      step One is {
        tell command Something() to entity blah
        reverted by
        tell command UndoSomething() to entity blah
      } as {
        example A is {
           then "Pass p1 to blah via Something command"
        }
      }
      step Two is {
        call AnotherThing(a=42) reverted by call UndoAnotherThing(a=42)
     } as {
        example B is {
          given "Step One has completed"
          then "Pass 42 to AnotherThing function"
          and "Return AnotherThing's output"
          but "Revert it with UndoAnotherThing(a=42) if it fails"
        }
      }
    }
  } described as "ignore"
} described as "just for testing a saga"
