domain dokn is {
    type Address = {
        line1: String,
        line2: String,
        line3: String,
        line4: String,
        city: String,
        province: String,
        country: String,
        postalCode: String
    }
    type MobileNumber = Pattern("\(([0-9]{3})\)([0-9]{3})-([0-9]{4})")
    //https:emailregex.com RFC 5322 Official Standard
    type EmailAddress = Pattern("(?:[a-z0-9!#$%&'*+/=?^_`{|}~-](?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-])|\"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])\")@(?:(?:[a-z0-9](?:[a-z0-9-][a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-][a-z0-9])?|[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)])")
    type LoadingMethod = any of { dock, tailgate, forklift, none }
    type CompanyId = Id(Company.Company)
    type DriverId = MobileNumber
    type NoteId = Id(Note.Note)
    type MediaId is Id(Media.Media)
    type LocationId is Id(Location.Location)
    type NoteList is reference to Note.Note*

    plant CompanyPlant is {
        pipe CompanyEvents is {
            transmit dokn.Company.Company.CompanyEvent
        }
    }

    context Company is {
        entity Company is {
            options(event-sourced, available)

            type AddCompany is command { mailingAddress: Address, primaryContactName: String, primaryContactPhone: MobileNumber, primaryContactEmail: EmailAddress }
            type CompanyAdded is event { ??? }
            type CompanyEvent is one of { type CompanyAdded }

            state CompanyBase is {
              fields {
                companyId: CompanyId,
                mailingAddress: Address,
                primaryContactName: String,
                primaryContactPhone: MobileNumber,
                primaryContactEmail: EmailAddress
              }
              handler CompanyBaseHandler is {
                  on command AddCompany {
                      then publish event CompanyAdded() to pipe dokn.CompanyPlant.CompanyEvents
                  }
              }
            }
        }
    }

    context Driver is {
        entity Driver is {
            options(event-sourced, available)

            type AddDriverToCompany is command  { name: String, mobile: MobileNumber, companyId: CompanyId }
            type DriverAddedToCompany is event { name: String, mobile: MobileNumber, companyId: CompanyId }

            type RemoveDriverFromCompany is command { mobile: MobileNumber, companyId: CompanyId }
            type DriverRemovedFromCompany is event { mobile: MobileNumber, companyId: CompanyId }

            type PlaceDriverOnDuty is command { mobile: MobileNumber }

            state DriverBase is {
              fields {
                driverId: DriverId,
                name: String,
                onDutyTime: TimeStamp,
                companyId: CompanyId
              }
              handler DriverBaseHandler is {
                  on command AddDriverToCompany {
                    then reply with event DriverAddedToCompany (
                      name = @AddDriverToCompany.name,
                      mobile = @AddDriverToCompany.mobile,
                      companyId = @AddDriverToCompany.companyId
                    )
                  }
                  on command RemoveDriverFromCompany {
                    then reply with event DriverRemovedFromCompany(
                      mobile = @RemoveDriverFromCompany.mobile,
                      companyId = @RemoveDriverFromCompany.companyId
                    )
                  }
              }
            }
        }
    }

    context Note is {
        entity Note is {
            options(event-sourced, available)
            state NoteBase is {
              fields {
                noteId: NoteId,
                locationId: LocationId,
                companyId: CompanyId,
                text: String,
                upvoteCount: Integer,
                downvoteCount: Integer,
                approved: Boolean
              }
              handler NoteBaseHandler is { ??? }
            }
        }
    }

    context Media is {
        entity Media is {
            options(consistent)
            state MediaBase is {
              fields {
                mediaId: MediaId,
                path: String,
                companyId: CompanyId
              }
              handler MediaBaseHandler is { ??? }
            }
        }
    }

    context Location is {
        entity Location is {
            options(event-sourced, available)

            type AddDeliveryLocation is command  { geohash: Location, label:
            String }
            type DeliveryLocationAdded is event  { }

            type ChangeLocationName is command { newName: String }
            type LocationNameChanged is event { newName: String }

            type ReportTicketReceived is command {}
            type TicketReportedAtLocation is event {}

            type ModifyNotesAtLocation is command { cid: CompanyId, note: String }
            type NotesForLocationModified is event { note: String }

            type LocationAddressReceived is event { newAddress: dokn.Address }

            type getLocationDetails is query  {}
            type LocationDetails is result  { ??? }

            type getLocationNotes is query { cid: CompanyId }
            type LocationNotes is result { notes: NoteList }

            state LocationBase is {
              fields {
                locationId: LocationId,
                geohash: Location,
                label: String ,
                address: Address,
                notes: NoteList,
                ticketCount: Integer,
                loadingMethod: LoadingMethod
              }
              handler Base is {
                  on command AddDeliveryLocation { then reply event DeliveryLocationAdded() }
                  on command ChangeLocationName {
                      then reply with event LocationNameChanged(
                          newName = @ChangeLocationName.newName
                      )
                  }
                  on command ReportTicketReceived { then reply event TicketReportedAtLocation()  }
                  on command ModifyNotesAtLocation {
                      then reply with event NotesForLocationModified(
                          note = @ModifyNotesAtLocation.newNote
                      )
                  }
                  on event LocationAddressReceived {
                      then set LocationBase.address to @^^LocationAddressReceived.newAddress
                  }
                  on query getLocationDetails { then tell result LocationDetails() to entity Driver }
                  on query getLocationNotes { then tell result LocationNotes(notes=empty()) to entity Driver }
              }
            }
        }
    }

} explained as {
    |The dokn domain is the starting point for a simple application which allows
    |delivery drivers to capture notes about delivery locations to create
    |efficiency for future deliveries. The main Entities within this domain are:
    |*Driver - a person who delivers parcels and freight deliveries to a
    |specific location.
    |*Location - A specific geographic location to which a driver delivers to.
    |*Note - Drivers capture notes about delivering to a specific location.
    |i.e. Accepts deliveries at loading dock C. Ask for Mike (555-123-4567)
}
