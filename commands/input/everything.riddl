domain Everything is {

  type SomeType is String
  command DoAThing is { thingField: Integer }

  context APlant is {
    source Source is { outlet Commands is DoAThing } with { described by "Data Source" }
    sink Sink is { inlet Events is DoAThing } with { explained as "Data Sink" }
    connector AChannel is {
      from outlet APlant.Source.Commands to inlet APlant.Sink.Events
    } with { explained as "A Channel" }
  } with { explained as "A Plant" }

  user Author is "human" with { briefly "An exemplar" }

  epic WritingABook is {
    user Everything.Author wants "to edit on the screen" so that "he can revise content more easily"
    case primary is { user Everything.Author wants "to do something" so that "it is done" ??? }
  } with {
    described as "A simple authoring story"
  }

  context full is {

    sink Sink is { inlet input is type DoAThing }

    connector con is {
       from outlet Everything.APlant.Source.Commands to inlet full.Sink.input
    }

    type str is String             // Define str as a String
    type num is Number             // Define num as a Number
    type boo is Boolean            // Define boo as a Boolean
    type ident is Id(Something)    // Define ident as an Id
    type dat is Date               // Define dat as a Date
    type tim is Time               // Define tim as a Time
    type stamp is TimeStamp        // Define stamp as a TimeStamp
    type url is URL

    type PeachType is { a: Integer }
    type enum is any of { Apple Pear Peach(23)  Persimmon(24) }

    type alt is one of { enum or stamp or url }

    type agg is {
      key: num,
      id: ident,
      time is TimeStamp
    }

    type oneOrMore is many agg
    type zeroOrMore is agg*
    type optional is agg?

    command ACommand is { ??? }

    entity Something is {

      type somethingDate is Date

      event Inebriated is { ??? }

      record fields is { field:  SomeType }
      state someState of Something.fields
      handler foo is {
        on command ACommand {
          "if and(Something arrives, misc()) then"
            send event Inebriated to inlet Everything.full.Sink.input
          "end"
        }
      }

      function whenUnderTheInfluence is {
        requires {n: Nothing}
        returns {b: Boolean}
        ???
      }
    } with {
      option aggregate option transient
    }

    entity SomeOtherThing is {
      type ItHappened is event { field: String }
      record fields is { field: String }
      state otherThingState of SomeOtherThing.fields
      handler fee is {
        on event ItHappened {
           set field SomeOtherThing.otherThingState.field to "field ItHappened.field"
        }
      }
    }
    function misc is {
      requires { n: Nothing }
      returns { b: Boolean }
     ???
    }
  }
}
