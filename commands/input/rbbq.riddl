domain ReactiveBBQ is {

  type CustomerId is Id(ReactiveBBQ.Customers.Customer) with { explained as {
    "Unique identifier for a customer"
  }}

  type OrderId is Id(ReactiveBBQ.Orders.Order) with {
    described as {
      |# brief
      |Unique identifier for a customer's order
      |# see
      |* [OrderId](http://www.example.com/show/details/on/OrderId)
    }
  }

  type Empty = Nothing

  context Customers is {
    entity Customer is {
      state main of ReactiveBBQ.Empty
      handler input is { ??? }
    }
  }

  context Kitchen is {
    type IP4Address is { a: Number, b: Number, c: Number, d: Number}
    type OrderViewType is {
      address:  type Kitchen.IP4Address
    } // Should we support IP4Address?
    entity OrderViewer is {
     record fields is { field: type Kitchen.OrderViewType }
     state OrderState of OrderViewer.fields
     handler input is { ??? }

    } with {
      option is kind("device")
      briefly "This is an OrderViewer"
      explained as {
        |The OrderViewer is the device in the kitchen, probably a touch screen,
        |that the cooks use to view the sequence of orders to cook
        |# see
        |* http://foo.com/
      }
    }
  } with {
    explained as {
      |# brief
      |The kitchen is where food is prepared
      |# details
      |The kitchen bounded context provides the ability for the kitchen staff
      |to interact with orders they are preparing. The kitchen is a client of
      |the orders bounded context and interacts with that context alone
      |the outstanding orders to be prepared. Everything else that happens in
      |the kitchen is out of scope for the restaurant automation software.
      |Consequently, this bounded context is pretty minimal.
      |### Subject-Verb-Object Statements
      |1. Kitchen displays orders
      |1. Order is sent to Kitchen for display
      |1. Order sends order status changes to Kitchen
      |1. Kitchen ignores drink items on order
      |1.
    }
  } // test end of definition comments

  context Loyalty is {
    type AccrualEvent is {
      when is TimeStamp,
      who is ReactiveBBQ.CustomerId,
      pointsAccrued is Number,
      fromOrder is OrderId
    }
    type AwardEvent is {
      when is TimeStamp,
      who is ReactiveBBQ.CustomerId,
      pointsAwarded is Number,
      toOrder is OrderId
    }
    type RewardEvent is one of { Loyalty.AccrualEvent or Loyalty.AwardEvent }
    entity RewardsAccount is {
      record fields is {
        id is ReactiveBBQ.CustomerId,
        points is Number,
        rewardEvents is many optional Loyalty.RewardEvent
      }
      state RewardState of RewardsAccount.fields
      handler Inputs is { ??? }
    }

    adaptor PaymentAdapter from context ReactiveBBQ.Payments is {
      ???
    }
  }

  context Orders is {
    entity Order is {
      record fields is {
        orderId is ReactiveBBQ.OrderId,
        customerId is ReactiveBBQ.CustomerId
      }
      state OrderState of Order.fields
      handler foo  is {}
    } with {
      option is aggregate
    }
  }

  context Payments is {
    entity Payment is {
      record fields is {
        orderId is ReactiveBBQ.OrderId,
        amount is Number,
        cardToken is String
      }
      state PaymentState of Payment.fields
      handler foo is { ??? }
    } with {
      option is aggregate
    }
  }

  context Menus is {
    entity MenuItem is {
      record fields is { something: String }
      state MenuState of Menus.MenuItem.fields
      handler foo is {}
    }
    type MenuItemRef is reference to entity Menus.MenuItem
    entity MenuEntity is {
      record fields is { items: many Menus.MenuItemRef }
      state typical of MenuEntity.fields
      handler foo is { ??? }
    } with {
      option is aggregate
    }
  }

  context Reservations is {
    type ReservationValue is {
      partyName is String,
      phoneNumber is String,
      location is Id(Location),
      time is Time,
      date is Date
    }
    entity Location is {
      record fields is { name: String }
      state typical of Location.fields
      handler foo is {}
    } with { explained as "This is a retail store Location" }

    entity Reservation is {
     record fields is { value: ReservationValue }
     state reservation of Reservation.fields
     handler ofInputs is {}
    } with {
     option aggregate
    }
  } // end of context
} with {
  explained as {
    |# brief
    | Reactive BBQ Domain Definition
    |#details
    |This domain definition is designed to be instructive in the RIDDL language.
    |It uses the case study from the Lightbend Reactive Architecture course as
    |the basis for defining the domain. The course uses a set of interviews with
    |Reactive BBQ employees to define the requirements. This domain specification
    |is a possible result of analyzing that domain: the Reactive BBQ restaurant.
  }
} // end of domain
