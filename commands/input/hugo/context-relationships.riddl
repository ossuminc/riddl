domain foo {
  context A {
    type AEvents is one of { A.AEvent1, C.CEvent }
    sink Sink { inlet aInlet is A.AEvents }
    command ACommand { ??? }
    event AEvent1 { ??? }

    entity AEntity {
      record AData is { a01: Integer, a02: String }
      state AState of record AData
      handler AHandler is {
        on command ACommand {
          set field B.BEntity.BData.b01 to "initial value"
          send event A.AEvent1 to inlet B.Flow.bInlet
          tell command C.CCommand to entity C.CEntity
        }
      }
    }
  } with {
    option css("fill:white,stroke:#333,stroke-width:3px,color:blue")
    option faicon("fa-house")
  }

  context B {
    command BCommand { ??? }
    flow Flow is {
      inlet bInlet is A.AEvents
      outlet bOutlet is A.AEvents
    }
    entity BEntity {
      record BData is { b01: Integer, b02: String }
      state BState of record BData
      handler BHandler is {
        on command BCommand {
          "do nothing for now"
        }
      }
    }
  } with {
    option css("fill:white,stroke:#333,stroke-width:3px,color:green")
    option faicon("fa-house")
  }
  context C {
    command CCommand is { ??? }
    event CEvent is { ??? }
    entity CEntity {
      record CData is { c01: Integer, c02: String }
      state BState of record BData
      handler CHandler is {
        on command CCommand {
          send event C.CEvent to inlet A.Sink.aInlet
        }
      }
    }
  } with {
    option css("fill:white,stroke:#333,stroke-width:3px,color:purple")
    option faicon("fa-house")
  }
}

domain bar {
  context D {
    adaptor Dadaptor from context A is { ??? }
  } with {
    option css("fill:white,stroke:#333,stroke-width:3px,color:red")
    option faicon("fa-house")
  }
}
