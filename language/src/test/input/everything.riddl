// Top Level Author
author Reid is { name: "Reid" email: "reid@ossum.biz" }

// A top level domain
domain Everything is {
  // How to mark a definition with the author that created it
  by author Reid

  type SomeType is String // <-- that's a type

  /* This is another way to do a comment, just like C/C++ */
  command DoAThing(thingField: Integer)

  context APlant is {
    source Source is { outlet Commands is type DoAThing } described by "Data Source"
    sink Sink is { inlet Commands is type DoAThing } explained as "Data Sink"

    connector AChannel is {
      from outlet Source.Commands
      to inlet Sink.Commands
    } explained as "A Channel"
  } briefly "A bunch of data flow connections"

  user Author is "human" briefly "A scoundrel"

  epic WritingABook is {
    user Everything.Author wants "to edit on the screen" so that "he can revise content more easily"
    case primary is { ??? }
  } described as "A simple authoring epic"

  context full is {
    type str is String             // Define str as a String
    type num is Number             // Define num as a Number
    type boo is Boolean            // Define boo as a Boolean
    type ident is Id(Something)    // Define ident as an Id
    type dat is Date               // Define dat as a Date
    type tim is Time               // Define tim as a Time
    type stamp is TimeStamp        // Define stamp as a TimeStamp
    type url is URL                // Define url as a Uniform Resource Locator

    type PeachType is { a: Integer // can you put a comment here?
    }
    type enum is any of { Apple Pear Peach(23)   Persimmon(24) }

    type alt is one of { enum or stamp or url } described as {
      | Alternations select one type from a list of types
    }


    type agg is {
      key: num,
      id: ident,
      time is TimeStamp
    }

    type oneOrMore is many agg
    type zeroOrMore is agg*
    type optional is agg?

    command ACommand()

    entity Something is {
      option aggregate
      option transient
      function misc is {
        requires { n: Nothing }
        returns { b: Boolean }
        body ???
      }
      type somethingDate is Date

      event Inebriated is { ??? }

      record someData(field:  SomeType)
      state someState of Something.someData is {
        handler foo is {
          // Handle the ACommand
          on command ACommand {
            if "Something arrives" then {
              // we want to send an event
              send event Inebriated to outlet APlant.Source.Commands
            }
          }
        }
      }

      function whenUnderTheInfluence is {
        requires { n: Nothing }
        returns  { b: Boolean }
        body ???
      }
    } briefly "Something is nothing interesting"

    entity SomeOtherThing is {
      type ItHappened is event { field: String }
      record otherThingData is { field: String }
      state otherThingState of SomeOtherThing.otherThingData is {
        handler fee is {
          on event ItHappened {
            set field SomeOtherThing.otherThingState.fields.field to
              "field ItHappened.field"
          }
        }
      }
    }
  }
}
