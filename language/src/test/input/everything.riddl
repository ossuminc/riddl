// #everything
// RIDDL is about defining domains so ...
domain Everything by author Reid is {

  author Reid is { name: "Reid" email: "reid@ossum.biz" }

  type SomeType is String
  command DoAThing is { thingField: Integer }

  // Channels are defined to flow messages between entities. They are defined
  // in domain scope because they can cross contexts too.

  context APlant is {
    source Source is { outlet Commands is type DoAThing } described by "Data Source"
    sink Sink is { inlet Commands is type DoAThing } explained as "Data Sink"

    connector AChannel is {
      from outlet Source.Commands
      to inlet Sink.Commands
    } explained as "A Channel"
  } briefly "A bunch of data flow connections"

  actor Author is "human" briefly "A scoundrel"

  epic WritingABook is {
    actor Everything.Author wants "to edit on the screen" so that "he can revise content more easily"
    case primary is { ??? }
  } described as "A simple authoring epic"

  // Domains are composed of bounded contexts so ...
  context full is {
    // Contexts can contain many kinds of definitions

    // 8 pre-defined types, shown as re-names
    type str is String             // Define str as a String
    type num is Number             // Define num as a Number
    type boo is Boolean            // Define boo as a Boolean
    type ident is Id(Something)    // Define ident as an Id
    type dat is Date               // Define dat as a Date
    type tim is Time               // Define tim as a Time
    type stamp is TimeStamp        // Define stamp as a TimeStamp
    type url is URL

    // Enumerations have a value chosen from a list of identifiers
    type PeachType is { a: Integer }
    type enum is any of { Apple Pear Peach(23)  Persimmon(24) }

    // Alternations select one type from a list of types
    type alt is one of { enum or stamp or url }

    // Aggregations combine several types and give each a field name identifier
    type agg is {
      key: num,
      id: ident,
      time is TimeStamp
    }

    // Types can have cardinality requirements similar to regular expressions
    type oneOrMore is many agg
    type zeroOrMore is agg*
    type optional is agg?

    // Commands, Events, Queries and Results are defined in terms of some
    // type, previously defined. Commands yield events. Queries yield results.

    command ACommand is {}

    // Entities are the main objects that contexts define. They can be
    // transient (memory only) or aggregate (they consume commands and queries)
    entity Something is {
      options (aggregate, transient)
      function misc is { requires { n: Nothing } returns { b: Boolean } }
      type somethingDate is Date

      event Inebriated is {}

      record someData is { field:  SomeType }
      state someState of Something.someData is {
        handler foo is {
          on command ACommand {
            example only {
              given "Something arrives "
              when misc()
              then send event Inebriated() to outlet APlant.Source.Commands
            }
          }
        }
      }

      function whenUnderTheInfluence is {
        requires {  n:Nothing }
        returns { b: Boolean }
      }
    } briefly "Something is nothing interesting"

    entity SomeOtherThing is {
      type ItHappened is event { field: String }
      record otherThingData is { field: String }
      state otherThingState of SomeOtherThing.otherThingData is {
        handler fee is {
          on event ItHappened {
            example only {
              then set SomeOtherThing.otherThingState.fields.field to
              @ItHappened.field
            }
          }
        }
      }
    }
  }
}

// #everything
