domain dokn is {
    type Address = {
        line1: String,
        line2: String,
        line3: String,
        line4: String,
        city: String,
        province: String,
        country: String,
        postalCode: String
    }
    type MobileNumber = Pattern("\\(([0-9]{3})\\)([0-9]{3})-([0-9]{4})")

    type EmailAddress = Pattern(
       "^[a-zA-Z0-9_+&*-] + (?:\\.[a-zA-Z0-9_+&*-] + )*@(?:[a-zA-Z0-9-]+\\.) + [a-zA-Z]{2,7}"
    )
    type LoadingMethod = any of { dock, tailgate, forklift, none }
    type CompanyId = Id(dokn.Company.Company)
    type DriverId = MobileNumber
    type NoteId = Id(dokn.Note.Note)
    type MediaId is Id(dokn.Media.Media)
    type LocationId is Id(dokn.Location.Location)
    type NoteList is reference to entity dokn.Note.Note

    context Company is {
        flow events is {
          inlet CompanyEvents_in is event dokn.Company.Company.CompanyEvent
          outlet CompanyEvents_out is event dokn.Company.Company.CompanyEvent
        }
        connector CompanyEvents is {
          from outlet CompanyEvents_out to inlet CompanyEvents_in
        }

        entity Company is {
            option event-sourced option available

            type AddCompany is command {
              mailingAddress: Address,
              primaryContactName: String,
              primaryContactPhone: MobileNumber,
              primaryContactEmail: EmailAddress
            }
            event CompanyAdded is { when: TimeStamp }
            type CompanyEvent is one of { event CompanyAdded }

            record fields is {
              companyId: CompanyId,
              mailingAddress: Address,
              primaryContactName: String,
              primaryContactPhone: MobileNumber,
              primaryContactEmail: EmailAddress
            }
            state CompanyBase of Company.fields
            handler CompanyBaseHandler is {
                on command AddCompany {
                    send event CompanyAdded to outlet CompanyEvents_out
                }
            }
        }
    }

    context Driver is {
        flow DriverMessages is {
          inlet Driver_in is type DriverCommands
          outlet Driver_out is type DriverEvents
        }

        entity Driver is {
            option event-sourced option available

            type AddDriverToCompany is command  { name: String, mobile: MobileNumber, companyId: CompanyId }
            type DriverAddedToCompany is event { name: String, mobile: MobileNumber, companyId: CompanyId }

            type RemoveDriverFromCompany is command { mobile: MobileNumber, companyId: CompanyId }
            type DriverRemovedFromCompany is event { mobile: MobileNumber, companyId: CompanyId }

            type PlaceDriverOnDuty is command { mobile: MobileNumber }

            type DriverCommands is one of { AddDriverToCompany,
                RemoveDriverFromCompany, PlaceDriverOnDuty }

            type DriverEvents is one of { DriverAddedToCompany,
               DriverRemovedFromCompany }

            record fields is {
              driverId: DriverId,
              name: String,
              onDutyTime: TimeStamp,
              companyId: CompanyId
            }
            state DriverBase of Driver.fields
            handler DriverBaseHandler is {
                on command AddDriverToCompany {
                  send event DriverAddedToCompany to inlet Driver_out
                }
                on command RemoveDriverFromCompany {
                  send event DriverRemovedFromCompany to inlet Driver_out
                }
            }
        }
    }

    context Note is {
        entity Note is {
            option event-sourced option available
            record fields is {
              noteId: NoteId,
              locationId: type LocationId,
              companyId: type CompanyId,
              text: String,
              upvoteCount: Integer,
              downvoteCount: Integer,
              approved: Boolean
            }
            state NoteBase of Note.fields
            handler NoteBaseHandler is { ??? }
        }
    }

    context Media is {
        entity Media is {
            option consistent
            record fields is {
              mediaId: MediaId,
              path: String,
              companyId: CompanyId
            }
            state MediaBase of Media.fields
            handler MediaBaseHandler is { ??? }
        }
    }

    context Location is {
        entity Location is {
            option event-sourced option available

            type AddDeliveryLocation is command  {
              geohash: Location, label: String
            }
            type DeliveryLocationAdded is event  { ??? }

            type ChangeLocationName is command { newName: String }
            type LocationNameChanged is event { newName: String }

            type ReportTicketReceived is command { ??? }
            type TicketReportedAtLocation is event { ??? }

            type ModifyNotesAtLocation is command { cid: CompanyId, note: String }
            type NotesForLocationModified is event { note: String }

            type LocationAddressReceived is event { newAddress: dokn.Address }

            type getLocationDetails is query  { ??? }
            type LocationDetails is result  { ??? }

            type getLocationNotes is query { cid: CompanyId }
            type LocationNotes is result { notes: NoteList }

            record fields is {
              locationId: type LocationId,
              geohash:  Location,
              label: String ,
              address: type Address,
              notes: type NoteList,
              ticketCount: Integer,
              loadingMethod: type LoadingMethod
            }
            state LocationBase of Location.fields
            handler Base is {
              on command Location.AddDeliveryLocation {
                send event Location.DeliveryLocationAdded to inlet CompanyEvents_in
              }
              on command ChangeLocationName {
                send event Location.LocationNameChanged to inlet CompanyEvents_in
              }
              on command ReportTicketReceived {
                send event Location.TicketReportedAtLocation to inlet CompanyEvents_in
              }
              on command ModifyNotesAtLocation {
                send event Location.NotesForLocationModified to inlet CompanyEvents_in
              }
              on event Location.LocationAddressReceived {
                set field LocationBase.address to "field Location.LocationAddressReceived.newAddress"
              }
              on query Location.getLocationDetails {
                send result Location.LocationDetails to inlet Driver_in
              }
              on query Location.getLocationNotes {
                send result Location.LocationNotes to outlet Driver_out
              }
            }
        }
    }
} with {
  explained as {
    |The dokn domain is the starting point for a simple application which allows
    |delivery drivers to capture notes about delivery locations to create
    |efficiency for future deliveries. The main Entities within this domain are:
    |*Driver - a person who delivers parcels and freight deliveries to a
    |specific location.
    |*Location - A specific geographic location to which a driver delivers to.
    |*Note - Drivers capture notes about delivering to a specific location.
    |i.e. Accepts deliveries at loading dock C. Ask for Mike (555-123-4567)
  }
}
